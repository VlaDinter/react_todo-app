{"version":3,"sources":["components/NewTodo/NewTodo.js","components/Header/Header.js","components/ToggleAll/ToggleAll.js","components/Toggle/Toggle.js","components/Destroy/Destroy.js","components/View/View.js","components/Edit/Edit.js","components/Todo/Todo.js","components/TodoList/TodoList.js","components/Main/Main.js","components/TodoCount/TodoCount.js","components/Filters/Filters.js","components/ClearCompleted/ClearCompleted.js","components/Footer/Footer.js","App.js","index.js"],"names":["NewTodo","state","inputValue","changeInputValue","event","setState","target","value","onEnter","key","trim","props","createTodo","className","placeholder","this","onChange","onKeyDown","React","PureComponent","Header","ToggleAll","todos","toggleAllCompleted","isAllCompleted","every","item","completed","type","id","checked","htmlFor","Toggle","index","title","onEdit","toggleCompleted","role","onClick","preventDefault","onDoubleClick","Destroy","destroyTodo","View","Edit","changeTitle","editTitle","closeEdit","editTodo","offEdit","saveEdit","input","createRef","current","focus","ref","onBlur","Todo","isEditing","changeEdit","TodoList","items","map","Main","todosFilter","length","filter","TodoCount","uncompletedLength","Filters","allSelected","activeSelected","completedSelected","onAllClick","changeFilter","todo","onActiveClick","onCompletedClick","href","ClearCompleted","clearCompleted","Footer","App","todoNumber","callback","storageState","JSON","parse","localStorage","getItem","Object","is","prevState","setItem","stringify","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99aea8d1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.PureComponent {\n  state = {\n    inputValue: '',\n  }\n\n  changeInputValue = (event) => {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  }\n\n  onEnter = (event) => {\n    if (event.key === 'Enter' && this.state.inputValue.trim() !== '') {\n      this.props.createTodo(this.state.inputValue);\n\n      this.setState({\n        inputValue: '',\n      });\n    }\n  }\n\n  render() {\n    return (\n      <input\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={this.state.inputValue}\n        onChange={this.changeInputValue}\n        onKeyDown={this.onEnter}\n      />\n    );\n  }\n}\n\nexport default NewTodo;\n\nNewTodo.propTypes = {\n  createTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport NewTodo from '../NewTodo/NewTodo';\n\nconst Header = ({ createTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n\n    <NewTodo createTodo={createTodo} />\n  </header>\n);\n\nexport default Header;\n\nHeader.propTypes = {\n  createTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ToggleAll = ({ todos, toggleAllCompleted }) => {\n  const isAllCompleted = todos.every(item => item.completed);\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        checked={isAllCompleted}\n        onChange={() => toggleAllCompleted(isAllCompleted)}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    </>\n  );\n};\n\nexport default ToggleAll;\n\nToggleAll.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  toggleAllCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Toggle = ({ index, title, id, completed, onEdit, toggleCompleted }) => (\n  <>\n    <input\n      type=\"checkbox\"\n      className=\"toggle\"\n      id={`todo-${index}`}\n      checked={completed}\n      onChange={() => toggleCompleted(id)}\n    />\n    <label\n      htmlFor={`todo-${index}`}\n      role=\"presentation\"\n      onClick={event => event.preventDefault()}\n      onDoubleClick={onEdit}\n    >\n      {title}\n    </label>\n  </>\n);\n\nexport default Toggle;\n\nToggle.propTypes = {\n  index: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  toggleCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Destroy = ({ id, destroyTodo }) => (\n  <button\n    type=\"button\"\n    className=\"destroy\"\n    onClick={() => destroyTodo(id)}\n  />\n);\n\nexport default Destroy;\n\nDestroy.propTypes = {\n  id: PropTypes.number.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Toggle from '../Toggle/Toggle';\nimport Destroy from '../Destroy/Destroy';\n\nconst View = (props) => {\n  const {\n    index,\n    title,\n    id,\n    completed,\n    toggleCompleted,\n    onEdit,\n    destroyTodo,\n  } = props;\n\n  return (\n    <div className=\"view\">\n      <Toggle\n        index={index}\n        title={title}\n        id={id}\n        completed={completed}\n        onEdit={onEdit}\n        toggleCompleted={toggleCompleted}\n      />\n      <Destroy id={id} destroyTodo={destroyTodo} />\n    </div>\n  );\n};\n\nexport default View;\n\nView.propTypes = {\n  index: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  toggleCompleted: PropTypes.func.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n};\n","import React, { PureComponent, createRef } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Edit extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.input = createRef();\n\n    this.state = {\n      editTitle: this.props.title,\n    };\n  }\n\n  componentDidMount() {\n    this.input.current.focus();\n  }\n\n  changeTitle = (event) => {\n    this.setState({\n      editTitle: event.target.value,\n    });\n  }\n\n  closeEdit = (event) => {\n    if (event.key === 'Enter') {\n      this.props.editTodo(this.state.editTitle.trim(), this.props.id);\n      this.props.offEdit();\n    }\n\n    if (event.key === 'Escape') {\n      this.props.offEdit();\n\n      this.setState({\n        editTitle: this.props.title,\n      });\n    }\n  }\n\n  saveEdit = () => {\n    this.props.editTodo(this.state.editTitle.trim(), this.props.id);\n    this.props.offEdit();\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={this.state.editTitle}\n        ref={this.input}\n        onChange={this.changeTitle}\n        onKeyDown={this.closeEdit}\n        onBlur={this.saveEdit}\n      />\n    );\n  }\n}\n\nexport default Edit;\n\nEdit.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  offEdit: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport View from '../View/View';\nimport Edit from '../Edit/Edit';\n\nclass Todo extends React.PureComponent {\n  state = {\n    isEditing: false,\n  }\n\n  changeEdit = () => {\n    this.setState(state => ({\n      isEditing: !state.isEditing,\n    }));\n  }\n\n  render() {\n    const {\n      index,\n      item,\n      toggleCompleted,\n      editTodo,\n      destroyTodo,\n    } = this.props;\n\n    const {\n      isEditing,\n    } = this.state;\n\n    return (\n      <li\n        className={\n          (isEditing && 'editing') || (item.completed && 'completed') || ''\n        }\n      >\n        <View\n          index={index}\n          title={item.title}\n          id={item.id}\n          completed={item.completed}\n          toggleCompleted={toggleCompleted}\n          onEdit={this.changeEdit}\n          destroyTodo={destroyTodo}\n        />\n        {\n          isEditing\n            && (\n              <Edit\n                title={item.title}\n                id={item.id}\n                offEdit={this.changeEdit}\n                editTodo={editTodo}\n              />\n            )\n        }\n      </li>\n    );\n  }\n}\n\nexport default Todo;\n\nTodo.propTypes = {\n  index: PropTypes.number.isRequired,\n  item: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  toggleCompleted: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Todo from '../Todo/Todo';\n\nconst TodoList = ({ items, toggleCompleted, destroyTodo, editTodo }) => (\n  <ul className=\"todo-list\">\n    {items.map((item, index) => (\n      <Todo\n        key={item.id}\n        index={index}\n        item={item}\n        toggleCompleted={toggleCompleted}\n        editTodo={editTodo}\n        destroyTodo={destroyTodo}\n      />\n    ))}\n  </ul>\n);\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  toggleCompleted: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ToggleAll from '../ToggleAll/ToggleAll';\nimport TodoList from '../TodoList/TodoList';\n\nconst Main = (props) => {\n  const {\n    todos,\n    todosFilter,\n    toggleAllCompleted,\n    toggleCompleted,\n    editTodo,\n    destroyTodo,\n  } = props;\n\n  return (\n    <section className=\"main\">\n      {\n        todos.length > 0\n          && (\n            <ToggleAll\n              todos={todos}\n              toggleAllCompleted={toggleAllCompleted}\n            />\n          )\n      }\n\n      <TodoList\n        items={todos.filter(todosFilter)}\n        toggleCompleted={toggleCompleted}\n        editTodo={editTodo}\n        destroyTodo={destroyTodo}\n      />\n    </section>\n  );\n};\n\nexport default Main;\n\nMain.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  todosFilter: PropTypes.func.isRequired,\n  toggleAllCompleted: PropTypes.func.isRequired,\n  toggleCompleted: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoCount = ({ uncompletedLength }) => (\n  <span className=\"todo-count\">\n    {`${uncompletedLength} items left`}\n  </span>\n);\n\nexport default TodoCount;\n\nTodoCount.propTypes = {\n  uncompletedLength: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Filters extends React.PureComponent {\n  state = {\n    allSelected: true,\n    activeSelected: false,\n    completedSelected: false,\n  }\n\n  onAllClick = () => {\n    this.setState({\n      allSelected: true,\n      activeSelected: false,\n      completedSelected: false,\n    });\n\n    this.props.changeFilter(todo => true);\n  }\n\n  onActiveClick = () => {\n    this.setState({\n      allSelected: false,\n      activeSelected: true,\n      completedSelected: false,\n    });\n\n    this.props.changeFilter(todo => !todo.completed);\n  }\n\n  onCompletedClick = () => {\n    this.setState({\n      allSelected: false,\n      activeSelected: false,\n      completedSelected: true,\n    });\n\n    this.props.changeFilter(todo => todo.completed);\n  }\n\n  render() {\n    return (\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={this.state.allSelected ? 'selected' : ''}\n            onClick={this.onAllClick}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={this.state.activeSelected ? 'selected' : ''}\n            onClick={this.onActiveClick}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={this.state.completedSelected ? 'selected' : ''}\n            onClick={this.onCompletedClick}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default Filters;\n\nFilters.propTypes = {\n  changeFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ClearCompleted = ({ clearCompleted }) => (\n  <button type=\"button\" className=\"clear-completed\" onClick={clearCompleted}>\n    Clear completed\n  </button>\n);\n\nexport default ClearCompleted;\n\nClearCompleted.propTypes = {\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodoCount from '../TodoCount/TodoCount';\nimport Filters from '../Filters/Filters';\nimport ClearCompleted from '../ClearCompleted/ClearCompleted';\n\nconst Footer = ({ uncompletedLength, changeFilter, clearCompleted }) => (\n  <footer className=\"footer\">\n    <TodoCount uncompletedLength={uncompletedLength} />\n\n    <Filters changeFilter={changeFilter} />\n\n    <ClearCompleted clearCompleted={clearCompleted} />\n  </footer>\n);\n\nexport default Footer;\n\nFooter.propTypes = {\n  uncompletedLength: PropTypes.number.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\nimport Footer from './components/Footer/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    todoNumber: 1,\n    todosFilter: () => true,\n  };\n\n  componentDidMount() {\n    const storageState = JSON.parse(localStorage.getItem('state'));\n\n    if (!Object.is(null, storageState)) {\n      this.setState({\n        todos: storageState.todos,\n        todoNumber: storageState.todoNumber,\n      });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.todos !== prevState.todos) {\n      localStorage.setItem('state', JSON.stringify(this.state));\n    }\n  }\n\n  createTodo = (value) => {\n    this.setState(state => ({\n      todos:\n        [\n          ...state.todos,\n          {\n            title: value.trim(),\n            id: state.todoNumber,\n            completed: false,\n          },\n        ],\n      todoNumber: state.todoNumber + 1,\n    }));\n  }\n\n  toggleAllCompleted = (isAllCompleted) => {\n    if (isAllCompleted) {\n      this.setState(state => ({\n        todos: state.todos.map(todo => ({\n          ...todo,\n          completed: false,\n        })),\n      }));\n    } else {\n      this.setState(state => ({\n        todos: state.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      }));\n    }\n  }\n\n  toggleCompleted = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return ({\n            ...todo,\n            completed: !todo.completed,\n          });\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  editTodo = (title, id) => {\n    if (title !== '') {\n      this.setState(state => ({\n        todos: state.todos.map((todo) => {\n          if (todo.id === id) {\n            return ({\n              ...todo,\n              title,\n            });\n          }\n\n          return todo;\n        }),\n      }));\n    } else {\n      this.destroyTodo(id);\n    }\n  }\n\n  destroyTodo = (id) => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  changeFilter = (callback) => {\n    this.setState({\n      todosFilter: callback,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const {\n      todos,\n      todosFilter,\n    } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header createTodo={this.createTodo} />\n\n        <Main\n          todos={todos}\n          todosFilter={todosFilter}\n          toggleAllCompleted={this.toggleAllCompleted}\n          toggleCompleted={this.toggleCompleted}\n          editTodo={this.editTodo}\n          destroyTodo={this.destroyTodo}\n        />\n\n        {\n          this.state.todos.length > 0\n            && (\n              <Footer\n                uncompletedLength={todos.filter(todo => (\n                  !todo.completed\n                )).length}\n                changeFilter={this.changeFilter}\n                clearCompleted={this.clearCompleted}\n              />\n            )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}